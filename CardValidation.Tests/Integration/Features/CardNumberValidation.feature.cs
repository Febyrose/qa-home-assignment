// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace CardValidation.Tests.Integration.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreditCardNumberValidationFeature : object, Xunit.IClassFixture<CreditCardNumberValidationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Integration/Features", "Credit Card Number Validation", "  As a payment system\r\n  I want to validate credit card numbers\r\n  So that I can " +
                "identify valid cards and reject invalid ones", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CardNumberValidation.feature"
#line hidden
        
        public CreditCardNumberValidationFeature(CreditCardNumberValidationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
  #line hidden
#line 7
    await testRunner.GivenAsync("the credit card validation API is accessible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Recognize valid credit card numbers and return their type")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Number Validation")]
        [Xunit.TraitAttribute("Description", "Recognize valid credit card numbers and return their type")]
        [Xunit.InlineDataAttribute("4333333333333333", "Visa", new string[0])]
        [Xunit.InlineDataAttribute("4234123412341234", "Visa", new string[0])]
        [Xunit.InlineDataAttribute("5555555555554444", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("5151515151515151", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("2221523612358523", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("2720999999999996", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("378282246310005", "AmericanExpress", new string[0])]
        [Xunit.InlineDataAttribute("348282246310005", "AmericanExpress", new string[0])]
        public async global::System.Threading.Tasks.Task RecognizeValidCreditCardNumbersAndReturnTheirType(string cardNumber, string cardType, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cardNumber", cardNumber);
            argumentsOfScenario.Add("cardType", cardType);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Recognize valid credit card numbers and return their type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "owner",
                            "Leo John"});
                table1.AddRow(new string[] {
                            "number",
                            string.Format("{0}", cardNumber)});
                table1.AddRow(new string[] {
                            "date",
                            "11/2026"});
                table1.AddRow(new string[] {
                            "cvv",
                            "123"});
#line 10
    await testRunner.GivenAsync("I input the credit card details:", ((string)(null)), table1, "Given ");
#line hidden
#line 16
    await testRunner.WhenAsync("I submit the validation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
    await testRunner.ThenAsync("the response should be successful with status code 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 18
    await testRunner.AndAsync(string.Format("the detected card type should be \"{0}\"", cardType), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Reject unsupported or malformed card numbers")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Number Validation")]
        [Xunit.TraitAttribute("Description", "Reject unsupported or malformed card numbers")]
        [Xunit.InlineDataAttribute("6011111111111117", new string[0])]
        [Xunit.InlineDataAttribute("3530111333300000", new string[0])]
        [Xunit.InlineDataAttribute("4111-1111-1111-1111", new string[0])]
        [Xunit.InlineDataAttribute("abcdefghijklmnop", new string[0])]
        [Xunit.InlineDataAttribute("12345678901234567", new string[0])]
        [Xunit.InlineDataAttribute("411111111111111a", new string[0])]
        public async global::System.Threading.Tasks.Task RejectUnsupportedOrMalformedCardNumbers(string cardNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cardNumber", cardNumber);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Reject unsupported or malformed card numbers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "owner",
                            "Leo John"});
                table2.AddRow(new string[] {
                            "number",
                            string.Format("{0}", cardNumber)});
                table2.AddRow(new string[] {
                            "date",
                            "11/2026"});
                table2.AddRow(new string[] {
                            "cvv",
                            "123"});
#line 32
    await testRunner.GivenAsync("I input the credit card details:", ((string)(null)), table2, "Given ");
#line hidden
#line 38
    await testRunner.WhenAsync("I submit the validation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
    await testRunner.AndAsync("an error message stating \"Wrong number\" should be returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Omitted card number field triggers validation error")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Number Validation")]
        [Xunit.TraitAttribute("Description", "Omitted card number field triggers validation error")]
        public async global::System.Threading.Tasks.Task OmittedCardNumberFieldTriggersValidationError()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Omitted card number field triggers validation error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "owner",
                            "Leo John"});
                table3.AddRow(new string[] {
                            "date",
                            "11/2026"});
                table3.AddRow(new string[] {
                            "cvv",
                            "123"});
#line 52
    await testRunner.GivenAsync("I input the credit card details:", ((string)(null)), table3, "Given ");
#line hidden
#line 57
    await testRunner.WhenAsync("I submit the validation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 59
    await testRunner.AndAsync("an error message stating \"Number is required\" should be returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Empty card number field triggers validation error")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Number Validation")]
        [Xunit.TraitAttribute("Description", "Empty card number field triggers validation error")]
        public async global::System.Threading.Tasks.Task EmptyCardNumberFieldTriggersValidationError()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Empty card number field triggers validation error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "owner",
                            "Leo John"});
                table4.AddRow(new string[] {
                            "number",
                            ""});
                table4.AddRow(new string[] {
                            "date",
                            "11/2026"});
                table4.AddRow(new string[] {
                            "cvv",
                            "123"});
#line 62
    await testRunner.GivenAsync("I input the credit card details:", ((string)(null)), table4, "Given ");
#line hidden
#line 68
    await testRunner.WhenAsync("I submit the validation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 69
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 70
    await testRunner.AndAsync("an error message stating \"Number is required\" should be returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CreditCardNumberValidationFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CreditCardNumberValidationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
