<?xml version="1.0" encoding="utf-8"?>
<TestRun id="3d52b9ac-178e-4a12-8546-5ec611d27981" name="@f08d61734a2b 2025-08-11 11:35:00" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-08-11T11:35:00.6345349+00:00" queuing="2025-08-11T11:35:00.6345350+00:00" start="2025-08-11T11:34:59.0628224+00:00" finish="2025-08-11T11:35:01.2745516+00:00" />
  <TestSettings name="default" id="49782b0c-c6da-49bb-ad8b-fcf43bcf247f">
    <Deployment runDeploymentRoot="_f08d61734a2b_2025-08-11_11_35_00" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="0a49f37b-9135-4125-9afa-f94dadb16d08" testId="c11a4799-f915-87f2-3d21-b5ec99182ebc" testName="Missing CVV field" computerName="f08d61734a2b" duration="00:00:00.0136292" startTime="2025-08-11T11:35:00.8452037+00:00" endTime="2025-08-11T11:35:00.8452037+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a49f37b-9135-4125-9afa-f94dadb16d08">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Cvv is required" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Cvv is required") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="201f8d0d-8f93-4bc0-b61e-5b809bbfe372" testId="4fb05d4e-0f53-b5fa-fd22-2035f7824f11" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;01/2026&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0000246" startTime="2025-08-11T11:35:00.5867792+00:00" endTime="2025-08-11T11:35:00.5867793+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="201f8d0d-8f93-4bc0-b61e-5b809bbfe372" />
    <UnitTestResult executionId="043cf139-2ece-4752-b2f3-d0201cd88b40" testId="364338d4-e1bd-fd03-d65d-c64cd1dde031" testName="Reject unsupported or malformed card numbers(cardNumber: &quot;3530111333300000&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0132659" startTime="2025-08-11T11:35:00.7761367+00:00" endTime="2025-08-11T11:35:00.7761368+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="043cf139-2ece-4752-b2f3-d0201cd88b40">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 3530111333300000 |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong number" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong number") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2931e46-5593-49d7-906c-4221547bdaba" testId="dd8ce132-c86a-ad92-d2b3-05d39884f34a" testName="Missing owner field" computerName="f08d61734a2b" duration="00:00:00.0151665" startTime="2025-08-11T11:35:00.8681996+00:00" endTime="2025-08-11T11:35:00.8681997+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2931e46-5593-49d7-906c-4221547bdaba">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Owner is required" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Owner is required") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4c0aba79-c5b9-40a0-9465-053d3ed406a0" testId="33cc01ec-7830-9beb-a1dd-326e84b26aaf" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;08/50&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0007004" startTime="2025-08-11T11:35:00.5863676+00:00" endTime="2025-08-11T11:35:00.5863677+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c0aba79-c5b9-40a0-9465-053d3ed406a0" />
    <UnitTestResult executionId="48e151fa-c028-4eac-b829-7ac43508c78c" testId="e180edf5-0c45-59c1-dcc3-960640bcc3b7" testName="Reject invalid owner names(owner: &quot;Leo123&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.1792632" startTime="2025-08-11T11:35:00.7268238+00:00" endTime="2025-08-11T11:35:00.7268240+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="48e151fa-c028-4eac-b829-7ac43508c78c">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo123           |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.1s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong owner" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong owner") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0668f0fa-3e42-4deb-b8ae-5039c6f11b8e" testId="378f508d-ffe8-3c2e-3b66-c3d84fed9187" testName="Accept valid CVV codes(cvv: &quot;123&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0148903" startTime="2025-08-11T11:35:00.8053755+00:00" endTime="2025-08-11T11:35:00.8053758+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0668f0fa-3e42-4deb-b8ae-5039c6f11b8e">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b4ab7c26-aac1-4358-8fb8-9f40c47de990" testId="a2dd1c76-120f-98c2-575e-83adbc0725a8" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;361449635398431&quot;)" computerName="f08d61734a2b" duration="00:00:00.0003396" startTime="2025-08-11T11:35:00.5837581+00:00" endTime="2025-08-11T11:35:00.5837581+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4ab7c26-aac1-4358-8fb8-9f40c47de990" />
    <UnitTestResult executionId="007d1fec-df46-4bcd-b647-959812493510" testId="08ab82f2-fd1d-8167-f6df-5c95565b93a1" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;111&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0002125" startTime="2025-08-11T11:35:00.5540953+00:00" endTime="2025-08-11T11:35:00.5540953+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="007d1fec-df46-4bcd-b647-959812493510" />
    <UnitTestResult executionId="0582091a-0f9c-4612-9adc-ec0f80aae6ef" testId="3feb2eda-97d8-aea5-e856-0df19747fe91" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenAmExCardStartingWith37IsValid" computerName="f08d61734a2b" duration="00:00:00.0000309" startTime="2025-08-11T11:35:00.5988125+00:00" endTime="2025-08-11T11:35:00.5988126+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0582091a-0f9c-4612-9adc-ec0f80aae6ef" />
    <UnitTestResult executionId="e34a38f6-403a-4b51-b6aa-f911520761f6" testId="b041914b-df94-4094-76e4-f31e8918e221" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;L&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0000028" startTime="2025-08-11T11:35:00.5555496+00:00" endTime="2025-08-11T11:35:00.5555497+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e34a38f6-403a-4b51-b6aa-f911520761f6" />
    <UnitTestResult executionId="5c4c9a70-0bc4-4b65-92ac-36488001aebb" testId="0e0284de-2e93-1eb9-67b7-49cfb120c6cd" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;08&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000016" startTime="2025-08-11T11:35:00.5875892+00:00" endTime="2025-08-11T11:35:00.5875893+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c4c9a70-0bc4-4b65-92ac-36488001aebb" />
    <UnitTestResult executionId="4f749558-1259-4290-beeb-e3e3eeea6e58" testId="2b1f9f2d-f191-06b2-5d29-8805c3e757b5" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;08/20267&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000024" startTime="2025-08-11T11:35:00.5872087+00:00" endTime="2025-08-11T11:35:00.5872088+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f749558-1259-4290-beeb-e3e3eeea6e58" />
    <UnitTestResult executionId="1140c311-c5ec-4e89-82e3-258619cd0d13" testId="d5eece6b-ea77-b3ac-3305-219815c9efd2" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;11&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000014" startTime="2025-08-11T11:35:00.5903939+00:00" endTime="2025-08-11T11:35:00.5903940+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1140c311-c5ec-4e89-82e3-258619cd0d13" />
    <UnitTestResult executionId="5ae930de-baa1-4de2-958b-407c35009689" testId="f6f5987d-392c-85c3-ef2f-c3d6d3db48b3" testName="Empty CVV field" computerName="f08d61734a2b" duration="00:00:00.0151034" startTime="2025-08-11T11:35:00.8628233+00:00" endTime="2025-08-11T11:35:00.8628234+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ae930de-baa1-4de2-958b-407c35009689">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    |                  |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Cvv is required" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Cvv is required") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="994e70fd-280c-4921-b59e-448e3d25b029" testId="83191bb0-a792-4639-6928-60f9a8beb0b6" testName="Reject unsupported or malformed card numbers(cardNumber: &quot;6011111111111117&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0113989" startTime="2025-08-11T11:35:00.7607701+00:00" endTime="2025-08-11T11:35:00.7607701+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="994e70fd-280c-4921-b59e-448e3d25b029">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 6011111111111117 |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong number" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong number") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="16a74da9-6fcd-4f27-8590-d320fca1fcdc" testId="b7f2401b-3350-b5b6-acb3-a25be0470cab" testName="Reject past or invalid dates(date: &quot;ab/cd&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0138656" startTime="2025-08-11T11:35:00.7941240+00:00" endTime="2025-08-11T11:35:00.7941241+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16a74da9-6fcd-4f27-8590-d320fca1fcdc">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | ab/cd            |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong date" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong date") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f991faf-711f-4c1d-b961-d311075b3dc8" testId="cf7ae41c-dece-d199-847d-cd9d4b44b481" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;22222&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000022" startTime="2025-08-11T11:35:00.5899203+00:00" endTime="2025-08-11T11:35:00.5899204+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f991faf-711f-4c1d-b961-d311075b3dc8" />
    <UnitTestResult executionId="79ca396f-4d62-4b9b-a54b-2e7739659d56" testId="7582d223-8984-0f55-aff6-8a485174a7b5" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;09/2099&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0000103" startTime="2025-08-11T11:35:00.5882232+00:00" endTime="2025-08-11T11:35:00.5882232+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79ca396f-4d62-4b9b-a54b-2e7739659d56" />
    <UnitTestResult executionId="3690615b-8c3d-420d-86eb-a6e242e18bd4" testId="386ee516-6c49-0ed6-990d-34f3d12bd00a" testName="CardValidation.Tests.Unit.CardValidationServiceTests.GetPaymentSystemType_ShouldReturnMasterCard" computerName="f08d61734a2b" duration="00:00:00.0000638" startTime="2025-08-11T11:35:00.5990198+00:00" endTime="2025-08-11T11:35:00.5990198+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3690615b-8c3d-420d-86eb-a6e242e18bd4" />
    <UnitTestResult executionId="bf3f4917-6592-4a79-9a06-eaa11a992774" testId="ab05f7e5-3c8e-a47b-74fe-8170a2fbfe67" testName="Reject invalid owner names(owner: &quot;!@#$$%&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0172518" startTime="2025-08-11T11:35:00.7508094+00:00" endTime="2025-08-11T11:35:00.7508095+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf3f4917-6592-4a79-9a06-eaa11a992774">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | !@#$$%           |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong owner" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong owner") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0da9a150-9c6b-4500-ab34-cf84d0285a61" testId="3330202a-02c8-2a00-b6bb-97ab9eb1379c" testName="Missing date field" computerName="f08d61734a2b" duration="00:00:00.0205638" startTime="2025-08-11T11:35:00.8164310+00:00" endTime="2025-08-11T11:35:00.8164312+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0da9a150-9c6b-4500-ab34-cf84d0285a61">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Date is required" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Date is required") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04673037-3fe5-442d-8c14-04f278263814" testId="8baddf08-10d8-6b97-b7e6-06d036f6fa78" testName="Empty owner field" computerName="f08d61734a2b" duration="00:00:00.0142338" startTime="2025-08-11T11:35:00.8837547+00:00" endTime="2025-08-11T11:35:00.8837548+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04673037-3fe5-442d-8c14-04f278263814">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  |                  |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Owner is required" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Owner is required") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7430ab2f-d4ef-4673-9d9d-cb3af8893b4c" testId="f3e97896-c20c-2d67-3381-088ec0b560e7" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;1111111111111111&quot;)" computerName="f08d61734a2b" duration="00:00:00.0000070" startTime="2025-08-11T11:35:00.5839323+00:00" endTime="2025-08-11T11:35:00.5839324+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7430ab2f-d4ef-4673-9d9d-cb3af8893b4c" />
    <UnitTestResult executionId="cef676e7-fcfe-4451-84f4-ba09a209e37b" testId="8c5ea35d-61b2-f949-d807-fef912fa1bc4" testName="Accept valid owner names(owner: &quot;A&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0124285" startTime="2025-08-11T11:35:00.8035725+00:00" endTime="2025-08-11T11:35:00.8035727+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cef676e7-fcfe-4451-84f4-ba09a209e37b">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | A                |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eee424ef-914e-4521-94a2-b90a14abd8f1" testId="2df6041a-7e2c-2686-205b-61a0e981229f" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo123&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000039" startTime="2025-08-11T11:35:00.5833822+00:00" endTime="2025-08-11T11:35:00.5833823+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eee424ef-914e-4521-94a2-b90a14abd8f1" />
    <UnitTestResult executionId="70b51308-1c7e-4c0a-aff9-35ff765d47dc" testId="e05ce0f5-0cdd-1bb0-d3e5-c0aac666c836" testName="CardValidation.Tests.Unit.CardValidationServiceTests.GetPaymentSystemType_ShouldReturnVisa" computerName="f08d61734a2b" duration="00:00:00.0021524" startTime="2025-08-11T11:35:00.5910055+00:00" endTime="2025-08-11T11:35:00.5910055+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70b51308-1c7e-4c0a-aff9-35ff765d47dc" />
    <UnitTestResult executionId="0148320d-6bc6-404c-93e8-a96cb52c562b" testId="d32566d2-4a9e-85fe-3dbb-efc07f6c1711" testName="Reject past or invalid dates(date: &quot;00/2024&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.1796049" startTime="2025-08-11T11:35:00.7269926+00:00" endTime="2025-08-11T11:35:00.7269926+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0148320d-6bc6-404c-93e8-a96cb52c562b">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 00/2024          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.1s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong date" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong date") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="10234abb-d78b-4b3a-a520-27b27c93509a" testId="32cfaea6-ef66-431c-e774-c2a5b7f4081f" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;&quot;)" computerName="f08d61734a2b" duration="00:00:00.0000022" startTime="2025-08-11T11:35:00.5859420+00:00" endTime="2025-08-11T11:35:00.5859420+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10234abb-d78b-4b3a-a520-27b27c93509a" />
    <UnitTestResult executionId="3b309939-60f7-46e6-95eb-3f5958b3b4dd" testId="0ef7ed68-3a42-9490-f7ff-26ab50f5b3d9" testName="Recognize valid credit card numbers and return their type(cardNumber: &quot;348282246310005&quot;, cardType: &quot;30&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0259452" startTime="2025-08-11T11:35:00.8317350+00:00" endTime="2025-08-11T11:35:00.8317351+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b309939-60f7-46e6-95eb-3f5958b3b4dd">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value           |
  | owner  | Leo John        |
  | number | 348282246310005 |
  | date   | 11/2026         |
  | cvv    | 123             |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response should be successful with status code 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseShouldBeSuccessfulWithStatusCode(200) (0.0s)
And the detected card type should be "30"
-&gt; done: CardValidationStepDefinitions.ThenTheDetectedCardTypeShouldBe("30") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1298a721-da4f-4629-bc8e-21701f8b6352" testId="b79c0091-04d9-34e4-297f-851c197779c7" testName="Accept valid future or current dates(date: &quot;12/2025&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0134925" startTime="2025-08-11T11:35:00.8655737+00:00" endTime="2025-08-11T11:35:00.8655740+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1298a721-da4f-4629-bc8e-21701f8b6352">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2025          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14925665-3d46-4663-9cc4-27e910e332c5" testId="fb617639-5d52-2922-e444-1a85e579ddf1" testName="Recognize valid credit card numbers and return their type(cardNumber: &quot;4234123412341234&quot;, cardType: &quot;10&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0129202" startTime="2025-08-11T11:35:00.8762184+00:00" endTime="2025-08-11T11:35:00.8762185+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14925665-3d46-4663-9cc4-27e910e332c5">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4234123412341234 |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response should be successful with status code 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseShouldBeSuccessfulWithStatusCode(200) (0.0s)
And the detected card type should be "10"
-&gt; done: CardValidationStepDefinitions.ThenTheDetectedCardTypeShouldBe("10") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="93073bc6-67fb-4058-a0c2-cb8c99947cc8" testId="9300e9e8-0f85-748a-00c1-8e1975d8ffbd" testName="Accept valid CVV codes(cvv: &quot;7890&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0169827" startTime="2025-08-11T11:35:00.8301911+00:00" endTime="2025-08-11T11:35:00.8301912+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93073bc6-67fb-4058-a0c2-cb8c99947cc8">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 7890             |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11301280-21ff-4f67-b163-57cef3dfe8c0" testId="58872793-a77b-996e-02ff-9d99031b199d" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;1/30&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0003230" startTime="2025-08-11T11:35:00.5860886+00:00" endTime="2025-08-11T11:35:00.5860887+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11301280-21ff-4f67-b163-57cef3dfe8c0" />
    <UnitTestResult executionId="28326d0c-a123-4606-a6ed-dd631cffd5da" testId="06a1258f-6a76-585a-74db-2b8e2711079b" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;abcd1234efgh5678&quot;)" computerName="f08d61734a2b" duration="00:00:00.0000072" startTime="2025-08-11T11:35:00.5858004+00:00" endTime="2025-08-11T11:35:00.5858005+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28326d0c-a123-4606-a6ed-dd631cffd5da" />
    <UnitTestResult executionId="cc43bb9e-9567-47b5-aa9e-8c5591cfdcd7" testId="e68a335e-2bcf-ca54-be89-b389ebfd224a" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenVisaCardIsValid" computerName="f08d61734a2b" duration="00:00:00.0000410" startTime="2025-08-11T11:35:00.5992252+00:00" endTime="2025-08-11T11:35:00.5992253+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc43bb9e-9567-47b5-aa9e-8c5591cfdcd7" />
    <UnitTestResult executionId="0c77472a-2de8-4bb3-832e-1bb491985673" testId="33128f80-243c-fa42-c821-4c317f6d99e9" testName="Recognize valid credit card numbers and return their type(cardNumber: &quot;5555555555554444&quot;, cardType: &quot;20&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0127452" startTime="2025-08-11T11:35:00.8464526+00:00" endTime="2025-08-11T11:35:00.8464527+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c77472a-2de8-4bb3-832e-1bb491985673">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 5555555555554444 |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response should be successful with status code 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseShouldBeSuccessfulWithStatusCode(200) (0.0s)
And the detected card type should be "20"
-&gt; done: CardValidationStepDefinitions.ThenTheDetectedCardTypeShouldBe("20") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="016289bd-6c23-428a-bded-f9d9560c0d9b" testId="a18fdae7-a4f1-dc6f-7add-b30ecda61759" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: null)" computerName="f08d61734a2b" duration="00:00:00.0005334" startTime="2025-08-11T11:35:00.5836058+00:00" endTime="2025-08-11T11:35:00.5836059+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="016289bd-6c23-428a-bded-f9d9560c0d9b" />
    <UnitTestResult executionId="ef44171e-4d2d-4133-8e91-2c21c969baaa" testId="6fa52769-73d1-cae6-8203-d983b7de7fa3" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;5612345678901234&quot;)" computerName="f08d61734a2b" duration="00:00:00.0000026" startTime="2025-08-11T11:35:00.5851926+00:00" endTime="2025-08-11T11:35:00.5851927+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef44171e-4d2d-4133-8e91-2c21c969baaa" />
    <UnitTestResult executionId="76df8816-d9dc-475c-9b67-9626044feef6" testId="c6a48402-8f41-53c0-a618-9d8a321e706f" testName="Reject unsupported or malformed card numbers(cardNumber: &quot;4111-1111-1111-1111&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0129799" startTime="2025-08-11T11:35:00.7909852+00:00" endTime="2025-08-11T11:35:00.7909853+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76df8816-d9dc-475c-9b67-9626044feef6">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value               |
  | owner  | Leo John            |
  | number | 4111-1111-1111-1111 |
  | date   | 11/2026             |
  | cvv    | 123                 |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong number" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong number") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="82d75d5d-fea3-46ee-a001-3781e3933204" testId="8fe7c9f4-84c2-240b-e13f-2ea43bb36755" testName="Recognize valid credit card numbers and return their type(cardNumber: &quot;4333333333333333&quot;, cardType: &quot;10&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0107663" startTime="2025-08-11T11:35:00.9027908+00:00" endTime="2025-08-11T11:35:00.9027908+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82d75d5d-fea3-46ee-a001-3781e3933204">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response should be successful with status code 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseShouldBeSuccessfulWithStatusCode(200) (0.0s)
And the detected card type should be "10"
-&gt; done: CardValidationStepDefinitions.ThenTheDetectedCardTypeShouldBe("10") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b41d3d52-1237-40df-b100-1cc7afcce877" testId="92856975-3c19-9518-cf99-ca1905276cd0" testName="Recognize valid credit card numbers and return their type(cardNumber: &quot;2221523612358523&quot;, cardType: &quot;20&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0099866" startTime="2025-08-11T11:35:00.9136949+00:00" endTime="2025-08-11T11:35:00.9136950+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b41d3d52-1237-40df-b100-1cc7afcce877">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 2221523612358523 |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response should be successful with status code 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseShouldBeSuccessfulWithStatusCode(200) (0.0s)
And the detected card type should be "20"
-&gt; done: CardValidationStepDefinitions.ThenTheDetectedCardTypeShouldBe("20") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="503e6527-f86a-4e5f-92d8-c422a377374b" testId="e9a3466d-b41d-e89a-02e8-1d1b87e3e712" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo &quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0018122" startTime="2025-08-11T11:35:00.5826820+00:00" endTime="2025-08-11T11:35:00.5826821+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="503e6527-f86a-4e5f-92d8-c422a377374b">
      <Output>
        <ErrorInfo>
          <Message>Assert.Equal() Failure: Values differ
Expected: False
Actual:   True</Message>
          <StackTrace>   at CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(String name, Boolean expected) in /app/CardValidation.Tests/Unit/CardValidationServiceTests.cs:line 156
   at InvokeStub_CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c6900b42-34ec-41d8-b2b1-4c9f61809688" testId="120f61c1-5153-9bfb-70cd-d63d650a42f1" testName="Accept valid owner names(owner: &quot;A B C&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0216780" startTime="2025-08-11T11:35:00.7899079+00:00" endTime="2025-08-11T11:35:00.7899081+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6900b42-34ec-41d8-b2b1-4c9f61809688">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | A B C            |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9f6274a-fa39-4108-973a-e4f3533f8411" testId="1d6e8d5a-c3cd-feb0-5728-15bcc27905b0" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo Abey John S&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000120" startTime="2025-08-11T11:35:00.5552400+00:00" endTime="2025-08-11T11:35:00.5552401+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9f6274a-fa39-4108-973a-e4f3533f8411" />
    <UnitTestResult executionId="3337fd86-e05e-4bfd-9d23-be455e2e1508" testId="9bd97d9c-2337-5a76-8db6-fe7393a7e853" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForVisaCardWithLessThan13Digits" computerName="f08d61734a2b" duration="00:00:00.0000762" startTime="2025-08-11T11:35:00.5911688+00:00" endTime="2025-08-11T11:35:00.5911689+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3337fd86-e05e-4bfd-9d23-be455e2e1508" />
    <UnitTestResult executionId="115fc266-3188-4773-91ce-c0151aa7036e" testId="a895c912-599f-be3e-f1c3-228ab7795617" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;12/30&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0000067" startTime="2025-08-11T11:35:00.5885133+00:00" endTime="2025-08-11T11:35:00.5885133+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="115fc266-3188-4773-91ce-c0151aa7036e" />
    <UnitTestResult executionId="2c436d50-3d7f-4460-b497-54d6f668c328" testId="1c4d7a35-c8f3-2aa3-8117-710fc9b6f83c" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenMasterCardStartingWith2IsValid" computerName="f08d61734a2b" duration="00:00:00.0001338" startTime="2025-08-11T11:35:00.6000175+00:00" endTime="2025-08-11T11:35:00.6000176+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c436d50-3d7f-4460-b497-54d6f668c328" />
    <UnitTestResult executionId="36b58f78-33b6-4f16-9e89-eca6beeb5254" testId="ded29742-116c-0f24-a273-bc37c80b3b91" testName="Reject unsupported or malformed card numbers(cardNumber: &quot;411111111111111a&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0133046" startTime="2025-08-11T11:35:00.7468432+00:00" endTime="2025-08-11T11:35:00.7468433+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36b58f78-33b6-4f16-9e89-eca6beeb5254">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 411111111111111a |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong number" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong number") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2482a70c-17d5-4356-bd5d-9b1b559ecb52" testId="8b46796b-143b-e035-9e5a-cca69db638b3" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenMasterCardIsValid" computerName="f08d61734a2b" duration="00:00:00.0000559" startTime="2025-08-11T11:35:00.5982985+00:00" endTime="2025-08-11T11:35:00.5982988+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2482a70c-17d5-4356-bd5d-9b1b559ecb52" />
    <UnitTestResult executionId="11a6e664-9363-49bf-a711-2443eb43c95a" testId="a4d9d75e-7e9f-5528-555b-35a8754559c1" testName="Accept valid future or current dates(date: &quot;01/30&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0118011" startTime="2025-08-11T11:35:00.8790171+00:00" endTime="2025-08-11T11:35:00.8790172+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11a6e664-9363-49bf-a711-2443eb43c95a">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 01/30            |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="12ec2d5e-252e-4031-bb02-5e15d078946e" testId="789f8560-a8f1-80d8-7527-f854e26e9829" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot; Leo&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000309" startTime="2025-08-11T11:35:00.5830751+00:00" endTime="2025-08-11T11:35:00.5830751+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12ec2d5e-252e-4031-bb02-5e15d078946e" />
    <UnitTestResult executionId="ed33ff17-1440-423e-8cac-065bd1cd5ece" testId="f6e5d7e5-5e17-bf8f-5f3c-968348a511de" testName="Accept valid future or current dates(date: &quot;08/29&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0105193" startTime="2025-08-11T11:35:00.8904840+00:00" endTime="2025-08-11T11:35:00.8904841+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ed33ff17-1440-423e-8cac-065bd1cd5ece">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 08/29            |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e37fde21-2f2d-4416-ab44-ad4a4875737d" testId="17760f47-125e-b650-ea52-343316eed464" testName="Reject past or invalid dates(date: &quot;01/2020&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0130344" startTime="2025-08-11T11:35:00.7636656+00:00" endTime="2025-08-11T11:35:00.7636657+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e37fde21-2f2d-4416-ab44-ad4a4875737d">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 01/2020          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong date" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong date") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8bbb9a2d-a2df-4785-a74c-ee31e4b89525" testId="c22c5ebc-6411-f97f-9c80-5f6cf1d8bad3" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000075" startTime="2025-08-11T11:35:00.5897717+00:00" endTime="2025-08-11T11:35:00.5897718+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8bbb9a2d-a2df-4785-a74c-ee31e4b89525" />
    <UnitTestResult executionId="2df8ab9d-e508-4288-bd5e-f42664524c7e" testId="0611d2f2-c6b1-cb4b-cc89-471baea0eb49" testName="Reject invalid CVV codes(cvv: &quot;abc&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0131811" startTime="2025-08-11T11:35:00.7653762+00:00" endTime="2025-08-11T11:35:00.7653763+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2df8ab9d-e508-4288-bd5e-f42664524c7e">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | abc              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong cvv" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong cvv") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2836a368-0634-4acf-ae66-ba464fa82d7c" testId="adf3cc78-8768-7c6b-90db-ab7cf762fc1c" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;123&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0000019" startTime="2025-08-11T11:35:00.5902190+00:00" endTime="2025-08-11T11:35:00.5902190+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2836a368-0634-4acf-ae66-ba464fa82d7c" />
    <UnitTestResult executionId="179da51c-a920-4029-8eb4-2c5a43970b5f" testId="7a1d580c-4807-fa10-2d3c-aa4c3ad5940d" testName="Reject past or invalid dates(date: &quot;13/2026&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0157777" startTime="2025-08-11T11:35:00.7493193+00:00" endTime="2025-08-11T11:35:00.7493195+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="179da51c-a920-4029-8eb4-2c5a43970b5f">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 13/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong date" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong date") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95e0a62a-78c9-4285-80f4-abd4d6decf27" testId="107266d7-10b6-8ab8-71d5-4d18c724220a" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000040" startTime="2025-08-11T11:35:00.5832352+00:00" endTime="2025-08-11T11:35:00.5832352+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95e0a62a-78c9-4285-80f4-abd4d6decf27" />
    <UnitTestResult executionId="cab4db0e-0066-4572-a150-17ca251ecb51" testId="d2e73b8a-297c-d39e-6abe-05130750c46a" testName="Reject invalid owner names(owner: &quot;Leo_John&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0127004" startTime="2025-08-11T11:35:00.7656459+00:00" endTime="2025-08-11T11:35:00.7656460+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cab4db0e-0066-4572-a150-17ca251ecb51">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo_John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong owner" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong owner") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d16932f2-cefa-478a-a0f1-1fe0684e6c05" testId="2981d1ba-6f9c-8f50-cf02-208b4401bac6" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;00/24&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0003401" startTime="2025-08-11T11:35:00.5862289+00:00" endTime="2025-08-11T11:35:00.5862290+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d16932f2-cefa-478a-a0f1-1fe0684e6c05" />
    <UnitTestResult executionId="cb168e36-0cfe-4fde-82b5-35fdf31d77e6" testId="f595cae7-9b31-87dd-d2dc-daa7ac7c9a8c" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenAmExCardStartingWith34IsValid" computerName="f08d61734a2b" duration="00:00:00.0000396" startTime="2025-08-11T11:35:00.5985817+00:00" endTime="2025-08-11T11:35:00.5985818+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb168e36-0cfe-4fde-82b5-35fdf31d77e6" />
    <UnitTestResult executionId="d29762db-f314-4cd0-ab38-b664453c5e95" testId="7b064407-3455-1133-6c9e-613ca3d38fee" testName="Recognize valid credit card numbers and return their type(cardNumber: &quot;2720999999999996&quot;, cardType: &quot;20&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0124108" startTime="2025-08-11T11:35:00.8615036+00:00" endTime="2025-08-11T11:35:00.8615039+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d29762db-f314-4cd0-ab38-b664453c5e95">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 2720999999999996 |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response should be successful with status code 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseShouldBeSuccessfulWithStatusCode(200) (0.0s)
And the detected card type should be "20"
-&gt; done: CardValidationStepDefinitions.ThenTheDetectedCardTypeShouldBe("20") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c688e09-8f3d-448b-9e9b-882c85fbd99f" testId="c114d872-6049-1eb6-7541-ba01e0a813c7" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;ABEY JOHN&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0000018" startTime="2025-08-11T11:35:00.5790899+00:00" endTime="2025-08-11T11:35:00.5790901+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c688e09-8f3d-448b-9e9b-882c85fbd99f" />
    <UnitTestResult executionId="5382eba5-eee4-4a24-b629-98b4813d4f5a" testId="52c5cbb5-1ed5-f51f-45bf-100022bfcdee" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo John&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0000017" startTime="2025-08-11T11:35:00.5787880+00:00" endTime="2025-08-11T11:35:00.5787881+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5382eba5-eee4-4a24-b629-98b4813d4f5a" />
    <UnitTestResult executionId="cacad2c2-2d76-4307-8e61-65e70cbd0813" testId="57bc87a1-53e4-3284-c6f3-7b8633d6b2b8" testName="Empty card number field triggers validation error" computerName="f08d61734a2b" duration="00:00:00.0121562" startTime="2025-08-11T11:35:00.9374552+00:00" endTime="2025-08-11T11:35:00.9374554+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cacad2c2-2d76-4307-8e61-65e70cbd0813">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value    |
  | owner  | Leo John |
  | number |          |
  | date   | 11/2026  |
  | cvv    | 123      |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Number is required" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Number is required") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92d25eae-ed3e-4bbd-bd5e-842c0adcddf3" testId="3ab9e342-0398-9b30-616d-3e4ad63cd53a" testName="Accept valid CVV codes(cvv: &quot;456&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0210051" startTime="2025-08-11T11:35:00.7887755+00:00" endTime="2025-08-11T11:35:00.7887757+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92d25eae-ed3e-4bbd-bd5e-842c0adcddf3">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 456              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc89baea-1dfa-4203-ac0b-9b9c0fbb4a76" testId="bb2129f3-18e7-9887-d8ca-4f47b75497a5" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;13/2025&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000017" startTime="2025-08-11T11:35:00.5886541+00:00" endTime="2025-08-11T11:35:00.5886542+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc89baea-1dfa-4203-ac0b-9b9c0fbb4a76" />
    <UnitTestResult executionId="8cedb74e-7c86-4c94-8b6e-a311f6175179" testId="1f25108c-73a9-e633-77ba-b2fe417be82e" testName="CardValidation.Tests.Unit.CardValidationServiceTests.GetPaymentSystemType_ShouldReturnAmExCard" computerName="f08d61734a2b" duration="00:00:00.0001099" startTime="2025-08-11T11:35:00.5913533+00:00" endTime="2025-08-11T11:35:00.5913533+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8cedb74e-7c86-4c94-8b6e-a311f6175179" />
    <UnitTestResult executionId="76bc8ea9-00cd-499b-b231-4dd4a2d60633" testId="f3c09aa0-f73d-d58e-a212-a8fa7a34ed63" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;33b&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0001598" startTime="2025-08-11T11:35:00.5894600+00:00" endTime="2025-08-11T11:35:00.5894601+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76bc8ea9-00cd-499b-b231-4dd4a2d60633" />
    <UnitTestResult executionId="45b470b0-208e-4dda-a459-2866ffbc7008" testId="a181c0ad-c066-37aa-f78b-4d2e2e91ec19" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;37144963539843&quot;)" computerName="f08d61734a2b" duration="00:00:00.0000020" startTime="2025-08-11T11:35:00.5853627+00:00" endTime="2025-08-11T11:35:00.5853627+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45b470b0-208e-4dda-a459-2866ffbc7008" />
    <UnitTestResult executionId="72e1384a-ae73-420d-97b7-296cf33d57c0" testId="a6df0bda-290f-36dc-b1e6-d5a880cf3178" testName="Reject past or invalid dates(date: &quot;12/2010&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0140534" startTime="2025-08-11T11:35:00.7790638+00:00" endTime="2025-08-11T11:35:00.7790642+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72e1384a-ae73-420d-97b7-296cf33d57c0">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2010          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong date" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong date") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c1074cf3-e099-4e09-8bee-f6c8815548e2" testId="0c67e1a7-e55c-75df-576c-296ea4f9d381" testName="Reject invalid CVV codes(cvv: &quot;12345&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0160532" startTime="2025-08-11T11:35:00.7500287+00:00" endTime="2025-08-11T11:35:00.7500287+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1074cf3-e099-4e09-8bee-f6c8815548e2">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 12345            |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong cvv" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong cvv") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0893ba5f-49d0-4fb1-a9d2-ace43c5cbad7" testId="f97c840f-dcb7-66b8-10ca-22151805e6a5" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;1234&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0002079" startTime="2025-08-11T11:35:00.5896120+00:00" endTime="2025-08-11T11:35:00.5896121+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0893ba5f-49d0-4fb1-a9d2-ace43c5cbad7" />
    <UnitTestResult executionId="66847b50-7e5f-4873-8b2e-33b15da28f6d" testId="401df311-7fb9-80a8-7e14-5f779cc76ab5" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;0826&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0001366" startTime="2025-08-11T11:35:00.5880483+00:00" endTime="2025-08-11T11:35:00.5880484+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66847b50-7e5f-4873-8b2e-33b15da28f6d">
      <Output>
        <ErrorInfo>
          <Message>Assert.Equal() Failure: Values differ
Expected: False
Actual:   True</Message>
          <StackTrace>   at CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(String date, Boolean expected) in /app/CardValidation.Tests/Unit/CardValidationServiceTests.cs:line 176
   at InvokeStub_CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f50b430-78ad-4398-820e-44fa85b89949" testId="2d4d517a-2f93-e398-47e4-1141f41e5681" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_ForValid16DigitVisaCard" computerName="f08d61734a2b" duration="00:00:00.0001460" startTime="2025-08-11T11:35:00.5892642+00:00" endTime="2025-08-11T11:35:00.5892642+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f50b430-78ad-4398-820e-44fa85b89949" />
    <UnitTestResult executionId="9f4fbb0b-f15d-4a5c-8087-6eed7c6513cd" testId="df0eeb68-f91c-8092-b41e-ef4ec1169f5a" testName="Reject invalid CVV codes(cvv: &quot;12&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.1793096" startTime="2025-08-11T11:35:00.7271695+00:00" endTime="2025-08-11T11:35:00.7271695+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f4fbb0b-f15d-4a5c-8087-6eed7c6513cd">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 12               |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.1s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong cvv" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong cvv") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3c0ab293-a72c-422e-9b02-8f48dc607ce0" testId="14d50277-34b0-f64e-20fd-82f2ef4e7e9e" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_ForValid13DigitVisaCard" computerName="f08d61734a2b" duration="00:00:00.0000310" startTime="2025-08-11T11:35:00.5998378+00:00" endTime="2025-08-11T11:35:00.5998379+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c0ab293-a72c-422e-9b02-8f48dc607ce0" />
    <UnitTestResult executionId="3ffc1a6e-278e-402e-8835-521626bbbbf4" testId="63ce18ba-b2b0-19e1-f15d-bd25554c39a6" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForVisaCardWithMoreThan16Digits" computerName="f08d61734a2b" duration="00:00:00.0000763" startTime="2025-08-11T11:35:00.5907961+00:00" endTime="2025-08-11T11:35:00.5907962+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ffc1a6e-278e-402e-8835-521626bbbbf4" />
    <UnitTestResult executionId="d50537af-582f-4cf8-bdf0-6099ea65dfb5" testId="5d76d024-4bac-ecfa-9b0c-094c1299abdd" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;411111111111&quot;)" computerName="f08d61734a2b" duration="00:00:00.0000019" startTime="2025-08-11T11:35:00.5856568+00:00" endTime="2025-08-11T11:35:00.5856568+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d50537af-582f-4cf8-bdf0-6099ea65dfb5" />
    <UnitTestResult executionId="24a2cea7-f076-487d-bbce-decf24b933cb" testId="f30c3af8-2474-5c66-72fa-cc68d6ef80f3" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;08-26&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000020" startTime="2025-08-11T11:35:00.5890726+00:00" endTime="2025-08-11T11:35:00.5890726+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24a2cea7-f076-487d-bbce-decf24b933cb" />
    <UnitTestResult executionId="9f3d4269-7878-4145-a0bf-d5d933e47b30" testId="be9b933d-e97a-d1b3-0664-6b3b47113598" testName="Recognize valid credit card numbers and return their type(cardNumber: &quot;378282246310005&quot;, cardType: &quot;30&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0132460" startTime="2025-08-11T11:35:00.8909826+00:00" endTime="2025-08-11T11:35:00.8909826+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f3d4269-7878-4145-a0bf-d5d933e47b30">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value           |
  | owner  | Leo John        |
  | number | 378282246310005 |
  | date   | 11/2026         |
  | cvv    | 123             |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response should be successful with status code 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseShouldBeSuccessfulWithStatusCode(200) (0.0s)
And the detected card type should be "30"
-&gt; done: CardValidationStepDefinitions.ThenTheDetectedCardTypeShouldBe("30") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b957a560-5f39-4aa1-a134-5d630e4f6c42" testId="957b5951-b0f1-a544-d595-925c2163a221" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;510510510510&quot;)" computerName="f08d61734a2b" duration="00:00:00.0000019" startTime="2025-08-11T11:35:00.5855117+00:00" endTime="2025-08-11T11:35:00.5855117+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b957a560-5f39-4aa1-a134-5d630e4f6c42" />
    <UnitTestResult executionId="d8c237f7-a7f4-4cc8-a66d-0a187c941a42" testId="d209f05b-1e90-6923-b547-af57bdf7fa03" testName="Accept valid future or current dates(date: &quot;11/2028&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0141987" startTime="2025-08-11T11:35:00.8503677+00:00" endTime="2025-08-11T11:35:00.8503678+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8c237f7-a7f4-4cc8-a66d-0a187c941a42">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 11/2028          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c9efe6c7-c8cb-4953-952d-b3e9a2dc3daf" testId="6bc9b763-e344-1283-4a08-b49a7dca78bb" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;abcd&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000022" startTime="2025-08-11T11:35:00.5900679+00:00" endTime="2025-08-11T11:35:00.5900680+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9efe6c7-c8cb-4953-952d-b3e9a2dc3daf" />
    <UnitTestResult executionId="5747462f-7708-490b-be1b-27ffdb9f948b" testId="42e67072-742e-0820-b90d-6ef0d69b5dd3" testName="Recognize valid credit card numbers and return their type(cardNumber: &quot;5151515151515151&quot;, cardType: &quot;20&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0088546" startTime="2025-08-11T11:35:00.9238758+00:00" endTime="2025-08-11T11:35:00.9238759+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5747462f-7708-490b-be1b-27ffdb9f948b">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 5151515151515151 |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response should be successful with status code 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseShouldBeSuccessfulWithStatusCode(200) (0.0s)
And the detected card type should be "20"
-&gt; done: CardValidationStepDefinitions.ThenTheDetectedCardTypeShouldBe("20") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ab30fa55-d36e-4448-ab9a-2aea1df1d019" testId="5750b9b9-b462-1b10-7330-2bd449512bae" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo@&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000028" startTime="2025-08-11T11:35:00.5557580+00:00" endTime="2025-08-11T11:35:00.5557581+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab30fa55-d36e-4448-ab9a-2aea1df1d019" />
    <UnitTestResult executionId="a767a5c3-d9be-4564-9555-f34422f73250" testId="3abdfee6-b7b3-c3a6-1585-1fb89e0b9116" testName="Reject unsupported or malformed card numbers(cardNumber: &quot;12345678901234567&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.1792225" startTime="2025-08-11T11:35:00.7261387+00:00" endTime="2025-08-11T11:35:00.7261388+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a767a5c3-d9be-4564-9555-f34422f73250">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value             |
  | owner  | Leo John          |
  | number | 12345678901234567 |
  | date   | 11/2026           |
  | cvv    | 123               |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.1s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong number" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong number") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38e6b8cd-6712-469a-af59-9cd32df704b6" testId="6bb58a22-8689-bab7-7269-1b3eda3b66f6" testName="Empty date field triggers validation error" computerName="f08d61734a2b" duration="00:00:00.0166121" startTime="2025-08-11T11:35:00.8347043+00:00" endTime="2025-08-11T11:35:00.8347044+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38e6b8cd-6712-469a-af59-9cd32df704b6">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   |                  |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Date is required" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Date is required") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="79b31be2-d99c-46f2-b38d-874c879d6af4" testId="4fc9ab30-c6c8-3938-a3e3-b5911432a79e" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;2026/08&quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000064" startTime="2025-08-11T11:35:00.5883691+00:00" endTime="2025-08-11T11:35:00.5883691+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79b31be2-d99c-46f2-b38d-874c879d6af4" />
    <UnitTestResult executionId="19be9340-bfd9-4d47-b508-9a74fceeee87" testId="9d8dd382-1a6f-a33a-55cb-f1f47174aa32" testName="Accept valid owner names(owner: &quot;Leo Abey John&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0120408" startTime="2025-08-11T11:35:00.8376626+00:00" endTime="2025-08-11T11:35:00.8376627+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19be9340-bfd9-4d47-b508-9a74fceeee87">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo Abey John    |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f00cd9ea-7bb2-40a7-9853-7db4d2508393" testId="2702e6a4-bf17-5ff8-cbee-94c9d4e62a51" testName="Accept valid owner names(owner: &quot;ABEY JOHN&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0125525" startTime="2025-08-11T11:35:00.8517463+00:00" endTime="2025-08-11T11:35:00.8517464+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f00cd9ea-7bb2-40a7-9853-7db4d2508393">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | ABEY JOHN        |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40acdf4d-23f4-412e-b7d3-52728d1ddaaa" testId="d0bf3a92-6dc1-b410-8549-7fa47c4fc1d3" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo Abey John&quot;, expected: True)" computerName="f08d61734a2b" duration="00:00:00.0084783" startTime="2025-08-11T11:35:00.5463155+00:00" endTime="2025-08-11T11:35:00.5463271+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40acdf4d-23f4-412e-b7d3-52728d1ddaaa" />
    <UnitTestResult executionId="337bc858-f68c-423c-833a-b1385dad4150" testId="064f6ea0-0614-3825-1780-9f54049353c2" testName="Accept valid owner names(owner: &quot;Leo John&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0184188" startTime="2025-08-11T11:35:00.8237951+00:00" endTime="2025-08-11T11:35:00.8237952+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="337bc858-f68c-423c-833a-b1385dad4150">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | 4333333333333333 |
  | date   | 12/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 200
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(200) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38f68960-48fb-4304-b69f-586235e62222" testId="71011f07-10eb-4109-a9ae-d8f2b8b38b51" testName="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot; &quot;, expected: False)" computerName="f08d61734a2b" duration="00:00:00.0000025" startTime="2025-08-11T11:35:00.5869562+00:00" endTime="2025-08-11T11:35:00.5869562+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38f68960-48fb-4304-b69f-586235e62222" />
    <UnitTestResult executionId="2cd3a99d-edd2-42fa-945b-35c0e3524350" testId="3755e597-f9a2-bdfd-d9e1-54e460b14f64" testName="Reject unsupported or malformed card numbers(cardNumber: &quot;abcdefghijklmnop&quot;, exampleTags: [])" computerName="f08d61734a2b" duration="00:00:00.0120950" startTime="2025-08-11T11:35:00.8043689+00:00" endTime="2025-08-11T11:35:00.8043690+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cd3a99d-edd2-42fa-945b-35c0e3524350">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field  | Value            |
  | owner  | Leo John         |
  | number | abcdefghijklmnop |
  | date   | 11/2026          |
  | cvv    | 123              |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Wrong number" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Wrong number") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4a9e727e-1331-4b5f-8c48-45041b561712" testId="da40f7b7-5129-86aa-6410-5f20018cb249" testName="Omitted card number field triggers validation error" computerName="f08d61734a2b" duration="00:00:00.0113348" startTime="2025-08-11T11:35:00.9499157+00:00" endTime="2025-08-11T11:35:00.9499160+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a9e727e-1331-4b5f-8c48-45041b561712">
      <Output>
        <StdOut>Given the credit card validation API is accessible
-&gt; done: CardValidationStepDefinitions.GivenTheCreditCardValidationAPIIsAccessible() (0.0s)
Given I input the credit card details:
  --- table step argument ---
  | Field | Value    |
  | owner | Leo John |
  | date  | 11/2026  |
  | cvv   | 123      |
-&gt; done: CardValidationStepDefinitions.GivenIInputTheCreditCardDetails(&lt;table&gt;) (0.0s)
When I submit the validation request
-&gt; done: CardValidationStepDefinitions.WhenISubmitTheValidationRequest() (0.0s)
Then the response status code should be 400
-&gt; done: CardValidationStepDefinitions.ThenTheResponseStatusCodeShouldBe(400) (0.0s)
And an error message stating "Number is required" should be returned
-&gt; done: CardValidationStepDefinitions.ThenAnErrorMessageStatingShouldBeReturned("Number is required") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenVisaCardIsValid" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="e68a335e-2bcf-ca54-be89-b389ebfd224a">
      <Execution id="cc43bb9e-9567-47b5-aa9e-8c5591cfdcd7" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnTrue_WhenVisaCardIsValid" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;08-26&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="f30c3af8-2474-5c66-72fa-cc68d6ef80f3">
      <Execution id="24a2cea7-f076-487d-bbce-decf24b933cb" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo@&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="5750b9b9-b462-1b10-7330-2bd449512bae">
      <Execution id="ab30fa55-d36e-4448-ab9a-2aea1df1d019" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="Recognize valid credit card numbers and return their type(cardNumber: &quot;4234123412341234&quot;, cardType: &quot;10&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="fb617639-5d52-2922-e444-1a85e579ddf1">
      <Execution id="14925665-3d46-4663-9cc4-27e910e332c5" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RecognizeValidCreditCardNumbersAndReturnTheirType" />
    </UnitTest>
    <UnitTest name="Empty owner field" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="8baddf08-10d8-6b97-b7e6-06d036f6fa78">
      <Execution id="04673037-3fe5-442d-8c14-04f278263814" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="EmptyOwnerField" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;411111111111&quot;)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="5d76d024-4bac-ecfa-9b0c-094c1299abdd">
      <Execution id="d50537af-582f-4cf8-bdf0-6099ea65dfb5" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;abcd&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="6bc9b763-e344-1283-4a08-b49a7dca78bb">
      <Execution id="c9efe6c7-c8cb-4953-952d-b3e9a2dc3daf" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateCvc_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.GetPaymentSystemType_ShouldReturnVisa" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="e05ce0f5-0cdd-1bb0-d3e5-c0aac666c836">
      <Execution id="70b51308-1c7e-4c0a-aff9-35ff765d47dc" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="GetPaymentSystemType_ShouldReturnVisa" />
    </UnitTest>
    <UnitTest name="Reject unsupported or malformed card numbers(cardNumber: &quot;6011111111111117&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="83191bb0-a792-4639-6928-60f9a8beb0b6">
      <Execution id="994e70fd-280c-4921-b59e-448e3d25b029" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RejectUnsupportedOrMalformedCardNumbers" />
    </UnitTest>
    <UnitTest name="Reject past or invalid dates(date: &quot;13/2026&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="7a1d580c-4807-fa10-2d3c-aa4c3ad5940d">
      <Execution id="179da51c-a920-4029-8eb4-2c5a43970b5f" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="RejectPastOrInvalidDates" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;33b&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="f3c09aa0-f73d-d58e-a212-a8fa7a34ed63">
      <Execution id="76bc8ea9-00cd-499b-b231-4dd4a2d60633" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateCvc_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForVisaCardWithLessThan13Digits" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="9bd97d9c-2337-5a76-8db6-fe7393a7e853">
      <Execution id="3337fd86-e05e-4bfd-9d23-be455e2e1508" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForVisaCardWithLessThan13Digits" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;08&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="0e0284de-2e93-1eb9-67b7-49cfb120c6cd">
      <Execution id="5c4c9a70-0bc4-4b65-92ac-36488001aebb" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;1234&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="f97c840f-dcb7-66b8-10ca-22151805e6a5">
      <Execution id="0893ba5f-49d0-4fb1-a9d2-ace43c5cbad7" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateCvc_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;510510510510&quot;)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="957b5951-b0f1-a544-d595-925c2163a221">
      <Execution id="b957a560-5f39-4aa1-a134-5d630e4f6c42" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;1111111111111111&quot;)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="f3e97896-c20c-2d67-3381-088ec0b560e7">
      <Execution id="7430ab2f-d4ef-4673-9d9d-cb3af8893b4c" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="Reject invalid CVV codes(cvv: &quot;12345&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="0c67e1a7-e55c-75df-576c-296ea4f9d381">
      <Execution id="c1074cf3-e099-4e09-8bee-f6c8815548e2" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CVVCodeValidationFeature" name="RejectInvalidCVVCodes" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenAmExCardStartingWith37IsValid" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="3feb2eda-97d8-aea5-e856-0df19747fe91">
      <Execution id="0582091a-0f9c-4612-9adc-ec0f80aae6ef" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnTrue_WhenAmExCardStartingWith37IsValid" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;&quot;)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="32cfaea6-ef66-431c-e774-c2a5b7f4081f">
      <Execution id="10234abb-d78b-4b3a-a520-27b27c93509a" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="Accept valid CVV codes(cvv: &quot;456&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="3ab9e342-0398-9b30-616d-3e4ad63cd53a">
      <Execution id="92d25eae-ed3e-4bbd-bd5e-842c0adcddf3" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CVVCodeValidationFeature" name="AcceptValidCVVCodes" />
    </UnitTest>
    <UnitTest name="Empty card number field triggers validation error" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="57bc87a1-53e4-3284-c6f3-7b8633d6b2b8">
      <Execution id="cacad2c2-2d76-4307-8e61-65e70cbd0813" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="EmptyCardNumberFieldTriggersValidationError" />
    </UnitTest>
    <UnitTest name="Accept valid future or current dates(date: &quot;12/2025&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="b79c0091-04d9-34e4-297f-851c197779c7">
      <Execution id="1298a721-da4f-4629-bc8e-21701f8b6352" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="AcceptValidFutureOrCurrentDates" />
    </UnitTest>
    <UnitTest name="Reject unsupported or malformed card numbers(cardNumber: &quot;12345678901234567&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="3abdfee6-b7b3-c3a6-1585-1fb89e0b9116">
      <Execution id="a767a5c3-d9be-4564-9555-f34422f73250" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RejectUnsupportedOrMalformedCardNumbers" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;0826&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="401df311-7fb9-80a8-7e14-5f779cc76ab5">
      <Execution id="66847b50-7e5f-4873-8b2e-33b15da28f6d" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="Missing owner field" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="dd8ce132-c86a-ad92-d2b3-05d39884f34a">
      <Execution id="c2931e46-5593-49d7-906c-4221547bdaba" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="MissingOwnerField" />
    </UnitTest>
    <UnitTest name="Reject unsupported or malformed card numbers(cardNumber: &quot;3530111333300000&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="364338d4-e1bd-fd03-d65d-c64cd1dde031">
      <Execution id="043cf139-2ece-4752-b2f3-d0201cd88b40" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RejectUnsupportedOrMalformedCardNumbers" />
    </UnitTest>
    <UnitTest name="Reject past or invalid dates(date: &quot;12/2010&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="a6df0bda-290f-36dc-b1e6-d5a880cf3178">
      <Execution id="72e1384a-ae73-420d-97b7-296cf33d57c0" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="RejectPastOrInvalidDates" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;37144963539843&quot;)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="a181c0ad-c066-37aa-f78b-4d2e2e91ec19">
      <Execution id="45b470b0-208e-4dda-a459-2866ffbc7008" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="Recognize valid credit card numbers and return their type(cardNumber: &quot;5151515151515151&quot;, cardType: &quot;20&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="42e67072-742e-0820-b90d-6ef0d69b5dd3">
      <Execution id="5747462f-7708-490b-be1b-27ffdb9f948b" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RecognizeValidCreditCardNumbersAndReturnTheirType" />
    </UnitTest>
    <UnitTest name="Recognize valid credit card numbers and return their type(cardNumber: &quot;348282246310005&quot;, cardType: &quot;30&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="0ef7ed68-3a42-9490-f7ff-26ab50f5b3d9">
      <Execution id="3b309939-60f7-46e6-95eb-3f5958b3b4dd" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RecognizeValidCreditCardNumbersAndReturnTheirType" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;1/30&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="58872793-a77b-996e-02ff-9d99031b199d">
      <Execution id="11301280-21ff-4f67-b163-57cef3dfe8c0" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="Empty date field triggers validation error" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="6bb58a22-8689-bab7-7269-1b3eda3b66f6">
      <Execution id="38e6b8cd-6712-469a-af59-9cd32df704b6" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="EmptyDateFieldTriggersValidationError" />
    </UnitTest>
    <UnitTest name="Missing CVV field" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="c11a4799-f915-87f2-3d21-b5ec99182ebc">
      <Execution id="0a49f37b-9135-4125-9afa-f94dadb16d08" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CVVCodeValidationFeature" name="MissingCVVField" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo Abey John&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="d0bf3a92-6dc1-b410-8549-7fa47c4fc1d3">
      <Execution id="40acdf4d-23f4-412e-b7d3-52728d1ddaaa" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;12/30&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="a895c912-599f-be3e-f1c3-228ab7795617">
      <Execution id="115fc266-3188-4773-91ce-c0151aa7036e" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_ForValid16DigitVisaCard" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="2d4d517a-2f93-e398-47e4-1141f41e5681">
      <Execution id="3f50b430-78ad-4398-820e-44fa85b89949" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnTrue_ForValid16DigitVisaCard" />
    </UnitTest>
    <UnitTest name="Accept valid future or current dates(date: &quot;08/29&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="f6e5d7e5-5e17-bf8f-5f3c-968348a511de">
      <Execution id="ed33ff17-1440-423e-8cac-065bd1cd5ece" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="AcceptValidFutureOrCurrentDates" />
    </UnitTest>
    <UnitTest name="Recognize valid credit card numbers and return their type(cardNumber: &quot;4333333333333333&quot;, cardType: &quot;10&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="8fe7c9f4-84c2-240b-e13f-2ea43bb36755">
      <Execution id="82d75d5d-fea3-46ee-a001-3781e3933204" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RecognizeValidCreditCardNumbersAndReturnTheirType" />
    </UnitTest>
    <UnitTest name="Accept valid future or current dates(date: &quot;11/2028&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="d209f05b-1e90-6923-b547-af57bdf7fa03">
      <Execution id="d8c237f7-a7f4-4cc8-a66d-0a187c941a42" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="AcceptValidFutureOrCurrentDates" />
    </UnitTest>
    <UnitTest name="Accept valid owner names(owner: &quot;A&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="8c5ea35d-61b2-f949-d807-fef912fa1bc4">
      <Execution id="cef676e7-fcfe-4451-84f4-ba09a209e37b" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="AcceptValidOwnerNames" />
    </UnitTest>
    <UnitTest name="Reject invalid owner names(owner: &quot;Leo123&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="e180edf5-0c45-59c1-dcc3-960640bcc3b7">
      <Execution id="48e151fa-c028-4eac-b829-7ac43508c78c" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="RejectInvalidOwnerNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo &quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="e9a3466d-b41d-e89a-02e8-1d1b87e3e712">
      <Execution id="503e6527-f86a-4e5f-92d8-c422a377374b" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;2026/08&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="4fc9ab30-c6c8-3938-a3e3-b5911432a79e">
      <Execution id="79b31be2-d99c-46f2-b38d-874c879d6af4" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="Accept valid CVV codes(cvv: &quot;123&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="378f508d-ffe8-3c2e-3b66-c3d84fed9187">
      <Execution id="0668f0fa-3e42-4deb-b8ae-5039c6f11b8e" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CVVCodeValidationFeature" name="AcceptValidCVVCodes" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;361449635398431&quot;)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="a2dd1c76-120f-98c2-575e-83adbc0725a8">
      <Execution id="b4ab7c26-aac1-4358-8fb8-9f40c47de990" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;5612345678901234&quot;)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="6fa52769-73d1-cae6-8203-d983b7de7fa3">
      <Execution id="ef44171e-4d2d-4133-8e91-2c21c969baaa" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="Reject unsupported or malformed card numbers(cardNumber: &quot;4111-1111-1111-1111&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="c6a48402-8f41-53c0-a618-9d8a321e706f">
      <Execution id="76df8816-d9dc-475c-9b67-9626044feef6" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RejectUnsupportedOrMalformedCardNumbers" />
    </UnitTest>
    <UnitTest name="Accept valid owner names(owner: &quot;ABEY JOHN&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="2702e6a4-bf17-5ff8-cbee-94c9d4e62a51">
      <Execution id="f00cd9ea-7bb2-40a7-9853-7db4d2508393" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="AcceptValidOwnerNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;09/2099&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="7582d223-8984-0f55-aff6-8a485174a7b5">
      <Execution id="79ca396f-4d62-4b9b-a54b-2e7739659d56" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="c22c5ebc-6411-f97f-9c80-5f6cf1d8bad3">
      <Execution id="8bbb9a2d-a2df-4785-a74c-ee31e4b89525" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateCvc_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenMasterCardIsValid" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="8b46796b-143b-e035-9e5a-cca69db638b3">
      <Execution id="2482a70c-17d5-4356-bd5d-9b1b559ecb52" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnTrue_WhenMasterCardIsValid" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;13/2025&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="bb2129f3-18e7-9887-d8ca-4f47b75497a5">
      <Execution id="dc89baea-1dfa-4203-ac0b-9b9c0fbb4a76" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: &quot;abcd1234efgh5678&quot;)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="06a1258f-6a76-585a-74db-2b8e2711079b">
      <Execution id="28326d0c-a123-4606-a6ed-dd631cffd5da" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;ABEY JOHN&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="c114d872-6049-1eb6-7541-ba01e0a813c7">
      <Execution id="0c688e09-8f3d-448b-9e9b-882c85fbd99f" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;01/2026&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="4fb05d4e-0f53-b5fa-fd22-2035f7824f11">
      <Execution id="201f8d0d-8f93-4bc0-b61e-5b809bbfe372" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;08/50&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="33cc01ec-7830-9beb-a1dd-326e84b26aaf">
      <Execution id="4c0aba79-c5b9-40a0-9465-053d3ed406a0" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="Reject past or invalid dates(date: &quot;00/2024&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="d32566d2-4a9e-85fe-3dbb-efc07f6c1711">
      <Execution id="0148320d-6bc6-404c-93e8-a96cb52c562b" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="RejectPastOrInvalidDates" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot; Leo&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="789f8560-a8f1-80d8-7527-f854e26e9829">
      <Execution id="12ec2d5e-252e-4031-bb02-5e15d078946e" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;08/20267&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="2b1f9f2d-f191-06b2-5d29-8805c3e757b5">
      <Execution id="4f749558-1259-4290-beeb-e3e3eeea6e58" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;L&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="b041914b-df94-4094-76e4-f31e8918e221">
      <Execution id="e34a38f6-403a-4b51-b6aa-f911520761f6" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForVisaCardWithMoreThan16Digits" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="63ce18ba-b2b0-19e1-f15d-bd25554c39a6">
      <Execution id="3ffc1a6e-278e-402e-8835-521626bbbbf4" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForVisaCardWithMoreThan16Digits" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo John&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="52c5cbb5-1ed5-f51f-45bf-100022bfcdee">
      <Execution id="5382eba5-eee4-4a24-b629-98b4813d4f5a" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="Recognize valid credit card numbers and return their type(cardNumber: &quot;378282246310005&quot;, cardType: &quot;30&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="be9b933d-e97a-d1b3-0664-6b3b47113598">
      <Execution id="9f3d4269-7878-4145-a0bf-d5d933e47b30" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RecognizeValidCreditCardNumbersAndReturnTheirType" />
    </UnitTest>
    <UnitTest name="Accept valid owner names(owner: &quot;Leo John&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="064f6ea0-0614-3825-1780-9f54049353c2">
      <Execution id="337bc858-f68c-423c-833a-b1385dad4150" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="AcceptValidOwnerNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="107266d7-10b6-8ab8-71d5-4d18c724220a">
      <Execution id="95e0a62a-78c9-4285-80f4-abd4d6decf27" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="Reject invalid CVV codes(cvv: &quot;abc&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="0611d2f2-c6b1-cb4b-cc89-471baea0eb49">
      <Execution id="2df8ab9d-e508-4288-bd5e-f42664524c7e" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CVVCodeValidationFeature" name="RejectInvalidCVVCodes" />
    </UnitTest>
    <UnitTest name="Accept valid CVV codes(cvv: &quot;7890&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="9300e9e8-0f85-748a-00c1-8e1975d8ffbd">
      <Execution id="93073bc6-67fb-4058-a0c2-cb8c99947cc8" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CVVCodeValidationFeature" name="AcceptValidCVVCodes" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenMasterCardStartingWith2IsValid" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="1c4d7a35-c8f3-2aa3-8117-710fc9b6f83c">
      <Execution id="2c436d50-3d7f-4460-b497-54d6f668c328" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnTrue_WhenMasterCardStartingWith2IsValid" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;111&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="08ab82f2-fd1d-8167-f6df-5c95565b93a1">
      <Execution id="007d1fec-df46-4bcd-b647-959812493510" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="Reject unsupported or malformed card numbers(cardNumber: &quot;411111111111111a&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="ded29742-116c-0f24-a273-bc37c80b3b91">
      <Execution id="36b58f78-33b6-4f16-9e89-eca6beeb5254" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RejectUnsupportedOrMalformedCardNumbers" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_WhenAmExCardStartingWith34IsValid" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="f595cae7-9b31-87dd-d2dc-daa7ac7c9a8c">
      <Execution id="cb168e36-0cfe-4fde-82b5-35fdf31d77e6" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnTrue_WhenAmExCardStartingWith34IsValid" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;123&quot;, expected: True)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="adf3cc78-8768-7c6b-90db-ab7cf762fc1c">
      <Execution id="2836a368-0634-4acf-ae66-ba464fa82d7c" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateCvc_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="Reject invalid CVV codes(cvv: &quot;12&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="df0eeb68-f91c-8092-b41e-ef4ec1169f5a">
      <Execution id="9f4fbb0b-f15d-4a5c-8087-6eed7c6513cd" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CVVCodeValidationFeature" name="RejectInvalidCVVCodes" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo123&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="2df6041a-7e2c-2686-205b-61a0e981229f">
      <Execution id="eee424ef-914e-4521-94a2-b90a14abd8f1" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="Recognize valid credit card numbers and return their type(cardNumber: &quot;2720999999999996&quot;, cardType: &quot;20&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="7b064407-3455-1133-6c9e-613ca3d38fee">
      <Execution id="d29762db-f314-4cd0-ab38-b664453c5e95" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RecognizeValidCreditCardNumbersAndReturnTheirType" />
    </UnitTest>
    <UnitTest name="Accept valid future or current dates(date: &quot;01/30&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="a4d9d75e-7e9f-5528-555b-35a8754559c1">
      <Execution id="11a6e664-9363-49bf-a711-2443eb43c95a" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="AcceptValidFutureOrCurrentDates" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot;00/24&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="2981d1ba-6f9c-8f50-cf02-208b4401bac6">
      <Execution id="d16932f2-cefa-478a-a0f1-1fe0684e6c05" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="Recognize valid credit card numbers and return their type(cardNumber: &quot;2221523612358523&quot;, cardType: &quot;20&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="92856975-3c19-9518-cf99-ca1905276cd0">
      <Execution id="b41d3d52-1237-40df-b100-1cc7afcce877" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RecognizeValidCreditCardNumbersAndReturnTheirType" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers(cardNumber: null)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="a18fdae7-a4f1-dc6f-7add-b30ecda61759">
      <Execution id="016289bd-6c23-428a-bded-f9d9560c0d9b" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnFalse_ForInvalidCardNumbers" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: &quot; &quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="71011f07-10eb-4109-a9ae-d8f2b8b38b51">
      <Execution id="38f68960-48fb-4304-b69f-586235e62222" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateIssueDate_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="Empty CVV field" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="f6f5987d-392c-85c3-ef2f-c3d6d3db48b3">
      <Execution id="5ae930de-baa1-4de2-958b-407c35009689" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CVVCodeValidationFeature" name="EmptyCVVField" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: &quot;Leo Abey John S&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="1d6e8d5a-c3cd-feb0-5728-15bcc27905b0">
      <Execution id="f9f6274a-fa39-4108-973a-e4f3533f8411" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames" />
    </UnitTest>
    <UnitTest name="Reject invalid owner names(owner: &quot;Leo_John&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="d2e73b8a-297c-d39e-6abe-05130750c46a">
      <Execution id="cab4db0e-0066-4572-a150-17ca251ecb51" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="RejectInvalidOwnerNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;22222&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="cf7ae41c-dece-d199-847d-cd9d4b44b481">
      <Execution id="3f991faf-711f-4c1d-b961-d311075b3dc8" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateCvc_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="Omitted card number field triggers validation error" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="da40f7b7-5129-86aa-6410-5f20018cb249">
      <Execution id="4a9e727e-1331-4b5f-8c48-45041b561712" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="OmittedCardNumberFieldTriggersValidationError" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.GetPaymentSystemType_ShouldReturnMasterCard" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="386ee516-6c49-0ed6-990d-34f3d12bd00a">
      <Execution id="3690615b-8c3d-420d-86eb-a6e242e18bd4" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="GetPaymentSystemType_ShouldReturnMasterCard" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateCvc_ShouldReturnExpected(cvc: &quot;11&quot;, expected: False)" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="d5eece6b-ea77-b3ac-3305-219815c9efd2">
      <Execution id="1140c311-c5ec-4e89-82e3-258619cd0d13" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateCvc_ShouldReturnExpected" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.GetPaymentSystemType_ShouldReturnAmExCard" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="1f25108c-73a9-e633-77ba-b2fe417be82e">
      <Execution id="8cedb74e-7c86-4c94-8b6e-a311f6175179" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="GetPaymentSystemType_ShouldReturnAmExCard" />
    </UnitTest>
    <UnitTest name="Reject past or invalid dates(date: &quot;01/2020&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="17760f47-125e-b650-ea52-343316eed464">
      <Execution id="e37fde21-2f2d-4416-ab44-ad4a4875737d" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="RejectPastOrInvalidDates" />
    </UnitTest>
    <UnitTest name="Recognize valid credit card numbers and return their type(cardNumber: &quot;5555555555554444&quot;, cardType: &quot;20&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="33128f80-243c-fa42-c821-4c317f6d99e9">
      <Execution id="0c77472a-2de8-4bb3-832e-1bb491985673" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RecognizeValidCreditCardNumbersAndReturnTheirType" />
    </UnitTest>
    <UnitTest name="Reject invalid owner names(owner: &quot;!@#$$%&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="ab05f7e5-3c8e-a47b-74fe-8170a2fbfe67">
      <Execution id="bf3f4917-6592-4a79-9a06-eaa11a992774" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="RejectInvalidOwnerNames" />
    </UnitTest>
    <UnitTest name="Accept valid owner names(owner: &quot;A B C&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="120f61c1-5153-9bfb-70cd-d63d650a42f1">
      <Execution id="c6900b42-34ec-41d8-b2b1-4c9f61809688" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="AcceptValidOwnerNames" />
    </UnitTest>
    <UnitTest name="Missing date field" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="3330202a-02c8-2a00-b6bb-97ab9eb1379c">
      <Execution id="0da9a150-9c6b-4500-ab34-cf84d0285a61" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="MissingDateField" />
    </UnitTest>
    <UnitTest name="Reject unsupported or malformed card numbers(cardNumber: &quot;abcdefghijklmnop&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="3755e597-f9a2-bdfd-d9e1-54e460b14f64">
      <Execution id="2cd3a99d-edd2-42fa-945b-35c0e3524350" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CreditCardNumberValidationFeature" name="RejectUnsupportedOrMalformedCardNumbers" />
    </UnitTest>
    <UnitTest name="Accept valid owner names(owner: &quot;Leo Abey John&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="9d8dd382-1a6f-a33a-55cb-f1f47174aa32">
      <Execution id="19be9340-bfd9-4d47-b508-9a74fceeee87" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.CardOwnerNameValidationFeature" name="AcceptValidOwnerNames" />
    </UnitTest>
    <UnitTest name="CardValidation.Tests.Unit.CardValidationServiceTests.ValidateNumber_ShouldReturnTrue_ForValid13DigitVisaCard" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="14d50277-34b0-f64e-20fd-82f2ef4e7e9e">
      <Execution id="3c0ab293-a72c-422e-9b02-8f48dc607ce0" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Unit.CardValidationServiceTests" name="ValidateNumber_ShouldReturnTrue_ForValid13DigitVisaCard" />
    </UnitTest>
    <UnitTest name="Reject past or invalid dates(date: &quot;ab/cd&quot;, exampleTags: [])" storage="/app/cardvalidation.tests/bin/debug/net8.0/cardvalidation.tests.dll" id="b7f2401b-3350-b5b6-acb3-a25be0470cab">
      <Execution id="16a74da9-6fcd-4f27-8590-d320fca1fcdc" />
      <TestMethod codeBase="/app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="CardValidation.Tests.Integration.Features.IssueDateValidationFeature" name="RejectPastOrInvalidDates" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="c11a4799-f915-87f2-3d21-b5ec99182ebc" executionId="0a49f37b-9135-4125-9afa-f94dadb16d08" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4fb05d4e-0f53-b5fa-fd22-2035f7824f11" executionId="201f8d0d-8f93-4bc0-b61e-5b809bbfe372" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="364338d4-e1bd-fd03-d65d-c64cd1dde031" executionId="043cf139-2ece-4752-b2f3-d0201cd88b40" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd8ce132-c86a-ad92-d2b3-05d39884f34a" executionId="c2931e46-5593-49d7-906c-4221547bdaba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="33cc01ec-7830-9beb-a1dd-326e84b26aaf" executionId="4c0aba79-c5b9-40a0-9465-053d3ed406a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e180edf5-0c45-59c1-dcc3-960640bcc3b7" executionId="48e151fa-c028-4eac-b829-7ac43508c78c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="378f508d-ffe8-3c2e-3b66-c3d84fed9187" executionId="0668f0fa-3e42-4deb-b8ae-5039c6f11b8e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a2dd1c76-120f-98c2-575e-83adbc0725a8" executionId="b4ab7c26-aac1-4358-8fb8-9f40c47de990" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08ab82f2-fd1d-8167-f6df-5c95565b93a1" executionId="007d1fec-df46-4bcd-b647-959812493510" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3feb2eda-97d8-aea5-e856-0df19747fe91" executionId="0582091a-0f9c-4612-9adc-ec0f80aae6ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b041914b-df94-4094-76e4-f31e8918e221" executionId="e34a38f6-403a-4b51-b6aa-f911520761f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e0284de-2e93-1eb9-67b7-49cfb120c6cd" executionId="5c4c9a70-0bc4-4b65-92ac-36488001aebb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b1f9f2d-f191-06b2-5d29-8805c3e757b5" executionId="4f749558-1259-4290-beeb-e3e3eeea6e58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5eece6b-ea77-b3ac-3305-219815c9efd2" executionId="1140c311-c5ec-4e89-82e3-258619cd0d13" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6f5987d-392c-85c3-ef2f-c3d6d3db48b3" executionId="5ae930de-baa1-4de2-958b-407c35009689" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83191bb0-a792-4639-6928-60f9a8beb0b6" executionId="994e70fd-280c-4921-b59e-448e3d25b029" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7f2401b-3350-b5b6-acb3-a25be0470cab" executionId="16a74da9-6fcd-4f27-8590-d320fca1fcdc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf7ae41c-dece-d199-847d-cd9d4b44b481" executionId="3f991faf-711f-4c1d-b961-d311075b3dc8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7582d223-8984-0f55-aff6-8a485174a7b5" executionId="79ca396f-4d62-4b9b-a54b-2e7739659d56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="386ee516-6c49-0ed6-990d-34f3d12bd00a" executionId="3690615b-8c3d-420d-86eb-a6e242e18bd4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab05f7e5-3c8e-a47b-74fe-8170a2fbfe67" executionId="bf3f4917-6592-4a79-9a06-eaa11a992774" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3330202a-02c8-2a00-b6bb-97ab9eb1379c" executionId="0da9a150-9c6b-4500-ab34-cf84d0285a61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8baddf08-10d8-6b97-b7e6-06d036f6fa78" executionId="04673037-3fe5-442d-8c14-04f278263814" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3e97896-c20c-2d67-3381-088ec0b560e7" executionId="7430ab2f-d4ef-4673-9d9d-cb3af8893b4c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c5ea35d-61b2-f949-d807-fef912fa1bc4" executionId="cef676e7-fcfe-4451-84f4-ba09a209e37b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2df6041a-7e2c-2686-205b-61a0e981229f" executionId="eee424ef-914e-4521-94a2-b90a14abd8f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e05ce0f5-0cdd-1bb0-d3e5-c0aac666c836" executionId="70b51308-1c7e-4c0a-aff9-35ff765d47dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d32566d2-4a9e-85fe-3dbb-efc07f6c1711" executionId="0148320d-6bc6-404c-93e8-a96cb52c562b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="32cfaea6-ef66-431c-e774-c2a5b7f4081f" executionId="10234abb-d78b-4b3a-a520-27b27c93509a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ef7ed68-3a42-9490-f7ff-26ab50f5b3d9" executionId="3b309939-60f7-46e6-95eb-3f5958b3b4dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b79c0091-04d9-34e4-297f-851c197779c7" executionId="1298a721-da4f-4629-bc8e-21701f8b6352" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb617639-5d52-2922-e444-1a85e579ddf1" executionId="14925665-3d46-4663-9cc4-27e910e332c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9300e9e8-0f85-748a-00c1-8e1975d8ffbd" executionId="93073bc6-67fb-4058-a0c2-cb8c99947cc8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58872793-a77b-996e-02ff-9d99031b199d" executionId="11301280-21ff-4f67-b163-57cef3dfe8c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="06a1258f-6a76-585a-74db-2b8e2711079b" executionId="28326d0c-a123-4606-a6ed-dd631cffd5da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e68a335e-2bcf-ca54-be89-b389ebfd224a" executionId="cc43bb9e-9567-47b5-aa9e-8c5591cfdcd7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="33128f80-243c-fa42-c821-4c317f6d99e9" executionId="0c77472a-2de8-4bb3-832e-1bb491985673" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a18fdae7-a4f1-dc6f-7add-b30ecda61759" executionId="016289bd-6c23-428a-bded-f9d9560c0d9b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6fa52769-73d1-cae6-8203-d983b7de7fa3" executionId="ef44171e-4d2d-4133-8e91-2c21c969baaa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6a48402-8f41-53c0-a618-9d8a321e706f" executionId="76df8816-d9dc-475c-9b67-9626044feef6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8fe7c9f4-84c2-240b-e13f-2ea43bb36755" executionId="82d75d5d-fea3-46ee-a001-3781e3933204" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92856975-3c19-9518-cf99-ca1905276cd0" executionId="b41d3d52-1237-40df-b100-1cc7afcce877" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e9a3466d-b41d-e89a-02e8-1d1b87e3e712" executionId="503e6527-f86a-4e5f-92d8-c422a377374b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="120f61c1-5153-9bfb-70cd-d63d650a42f1" executionId="c6900b42-34ec-41d8-b2b1-4c9f61809688" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d6e8d5a-c3cd-feb0-5728-15bcc27905b0" executionId="f9f6274a-fa39-4108-973a-e4f3533f8411" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bd97d9c-2337-5a76-8db6-fe7393a7e853" executionId="3337fd86-e05e-4bfd-9d23-be455e2e1508" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a895c912-599f-be3e-f1c3-228ab7795617" executionId="115fc266-3188-4773-91ce-c0151aa7036e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c4d7a35-c8f3-2aa3-8117-710fc9b6f83c" executionId="2c436d50-3d7f-4460-b497-54d6f668c328" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ded29742-116c-0f24-a273-bc37c80b3b91" executionId="36b58f78-33b6-4f16-9e89-eca6beeb5254" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b46796b-143b-e035-9e5a-cca69db638b3" executionId="2482a70c-17d5-4356-bd5d-9b1b559ecb52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4d9d75e-7e9f-5528-555b-35a8754559c1" executionId="11a6e664-9363-49bf-a711-2443eb43c95a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="789f8560-a8f1-80d8-7527-f854e26e9829" executionId="12ec2d5e-252e-4031-bb02-5e15d078946e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6e5d7e5-5e17-bf8f-5f3c-968348a511de" executionId="ed33ff17-1440-423e-8cac-065bd1cd5ece" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17760f47-125e-b650-ea52-343316eed464" executionId="e37fde21-2f2d-4416-ab44-ad4a4875737d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c22c5ebc-6411-f97f-9c80-5f6cf1d8bad3" executionId="8bbb9a2d-a2df-4785-a74c-ee31e4b89525" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0611d2f2-c6b1-cb4b-cc89-471baea0eb49" executionId="2df8ab9d-e508-4288-bd5e-f42664524c7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="adf3cc78-8768-7c6b-90db-ab7cf762fc1c" executionId="2836a368-0634-4acf-ae66-ba464fa82d7c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a1d580c-4807-fa10-2d3c-aa4c3ad5940d" executionId="179da51c-a920-4029-8eb4-2c5a43970b5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="107266d7-10b6-8ab8-71d5-4d18c724220a" executionId="95e0a62a-78c9-4285-80f4-abd4d6decf27" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d2e73b8a-297c-d39e-6abe-05130750c46a" executionId="cab4db0e-0066-4572-a150-17ca251ecb51" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2981d1ba-6f9c-8f50-cf02-208b4401bac6" executionId="d16932f2-cefa-478a-a0f1-1fe0684e6c05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f595cae7-9b31-87dd-d2dc-daa7ac7c9a8c" executionId="cb168e36-0cfe-4fde-82b5-35fdf31d77e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7b064407-3455-1133-6c9e-613ca3d38fee" executionId="d29762db-f314-4cd0-ab38-b664453c5e95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c114d872-6049-1eb6-7541-ba01e0a813c7" executionId="0c688e09-8f3d-448b-9e9b-882c85fbd99f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52c5cbb5-1ed5-f51f-45bf-100022bfcdee" executionId="5382eba5-eee4-4a24-b629-98b4813d4f5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57bc87a1-53e4-3284-c6f3-7b8633d6b2b8" executionId="cacad2c2-2d76-4307-8e61-65e70cbd0813" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ab9e342-0398-9b30-616d-3e4ad63cd53a" executionId="92d25eae-ed3e-4bbd-bd5e-842c0adcddf3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bb2129f3-18e7-9887-d8ca-4f47b75497a5" executionId="dc89baea-1dfa-4203-ac0b-9b9c0fbb4a76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f25108c-73a9-e633-77ba-b2fe417be82e" executionId="8cedb74e-7c86-4c94-8b6e-a311f6175179" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3c09aa0-f73d-d58e-a212-a8fa7a34ed63" executionId="76bc8ea9-00cd-499b-b231-4dd4a2d60633" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a181c0ad-c066-37aa-f78b-4d2e2e91ec19" executionId="45b470b0-208e-4dda-a459-2866ffbc7008" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6df0bda-290f-36dc-b1e6-d5a880cf3178" executionId="72e1384a-ae73-420d-97b7-296cf33d57c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c67e1a7-e55c-75df-576c-296ea4f9d381" executionId="c1074cf3-e099-4e09-8bee-f6c8815548e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f97c840f-dcb7-66b8-10ca-22151805e6a5" executionId="0893ba5f-49d0-4fb1-a9d2-ace43c5cbad7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="401df311-7fb9-80a8-7e14-5f779cc76ab5" executionId="66847b50-7e5f-4873-8b2e-33b15da28f6d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d4d517a-2f93-e398-47e4-1141f41e5681" executionId="3f50b430-78ad-4398-820e-44fa85b89949" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="df0eeb68-f91c-8092-b41e-ef4ec1169f5a" executionId="9f4fbb0b-f15d-4a5c-8087-6eed7c6513cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14d50277-34b0-f64e-20fd-82f2ef4e7e9e" executionId="3c0ab293-a72c-422e-9b02-8f48dc607ce0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63ce18ba-b2b0-19e1-f15d-bd25554c39a6" executionId="3ffc1a6e-278e-402e-8835-521626bbbbf4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5d76d024-4bac-ecfa-9b0c-094c1299abdd" executionId="d50537af-582f-4cf8-bdf0-6099ea65dfb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f30c3af8-2474-5c66-72fa-cc68d6ef80f3" executionId="24a2cea7-f076-487d-bbce-decf24b933cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be9b933d-e97a-d1b3-0664-6b3b47113598" executionId="9f3d4269-7878-4145-a0bf-d5d933e47b30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="957b5951-b0f1-a544-d595-925c2163a221" executionId="b957a560-5f39-4aa1-a134-5d630e4f6c42" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d209f05b-1e90-6923-b547-af57bdf7fa03" executionId="d8c237f7-a7f4-4cc8-a66d-0a187c941a42" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6bc9b763-e344-1283-4a08-b49a7dca78bb" executionId="c9efe6c7-c8cb-4953-952d-b3e9a2dc3daf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42e67072-742e-0820-b90d-6ef0d69b5dd3" executionId="5747462f-7708-490b-be1b-27ffdb9f948b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5750b9b9-b462-1b10-7330-2bd449512bae" executionId="ab30fa55-d36e-4448-ab9a-2aea1df1d019" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3abdfee6-b7b3-c3a6-1585-1fb89e0b9116" executionId="a767a5c3-d9be-4564-9555-f34422f73250" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6bb58a22-8689-bab7-7269-1b3eda3b66f6" executionId="38e6b8cd-6712-469a-af59-9cd32df704b6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4fc9ab30-c6c8-3938-a3e3-b5911432a79e" executionId="79b31be2-d99c-46f2-b38d-874c879d6af4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d8dd382-1a6f-a33a-55cb-f1f47174aa32" executionId="19be9340-bfd9-4d47-b508-9a74fceeee87" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2702e6a4-bf17-5ff8-cbee-94c9d4e62a51" executionId="f00cd9ea-7bb2-40a7-9853-7db4d2508393" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0bf3a92-6dc1-b410-8549-7fa47c4fc1d3" executionId="40acdf4d-23f4-412e-b7d3-52728d1ddaaa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="064f6ea0-0614-3825-1780-9f54049353c2" executionId="337bc858-f68c-423c-833a-b1385dad4150" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71011f07-10eb-4109-a9ae-d8f2b8b38b51" executionId="38f68960-48fb-4304-b69f-586235e62222" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3755e597-f9a2-bdfd-d9e1-54e460b14f64" executionId="2cd3a99d-edd2-42fa-945b-35c0e3524350" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da40f7b7-5129-86aa-6410-5f20018cb249" executionId="4a9e727e-1331-4b5f-8c48-45041b561712" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="97" executed="97" passed="95" failed="2" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.5.3.1+6b60a9e56a (64-bit .NET 8.0.19)
[xUnit.net 00:00:00.06]   Discovering: CardValidation.Tests
[xUnit.net 00:00:00.13]   Discovered:  CardValidation.Tests
[xUnit.net 00:00:00.13]   Starting:    CardValidation.Tests
-&gt; Loading plugin /app/CardValidation.Tests/bin/Debug/net8.0/Reqnroll.xUnit.ReqnrollPlugin.dll
-&gt; Loading plugin /app/CardValidation.Tests/bin/Debug/net8.0/CardValidation.Tests.dll
-&gt; Using default config
[xUnit.net 00:00:00.77]       Assert.Equal() Failure: Values differ
[xUnit.net 00:00:00.77]       Expected: False
[xUnit.net 00:00:00.77]       Actual:   True
[xUnit.net 00:00:00.77]       Stack Trace:
[xUnit.net 00:00:00.77]         /app/CardValidation.Tests/Unit/CardValidationServiceTests.cs(156,0): at CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(String name, Boolean expected)
[xUnit.net 00:00:00.77]            at InvokeStub_CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(Object, Span`1)
[xUnit.net 00:00:00.77]            at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:00.78]       Assert.Equal() Failure: Values differ
[xUnit.net 00:00:00.78]       Expected: False
[xUnit.net 00:00:00.78]       Actual:   True
[xUnit.net 00:00:00.78]       Stack Trace:
[xUnit.net 00:00:00.78]         /app/CardValidation.Tests/Unit/CardValidationServiceTests.cs(176,0): at CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(String date, Boolean expected)
[xUnit.net 00:00:00.78]            at InvokeStub_CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(Object, Span`1)
[xUnit.net 00:00:00.78]            at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
     Warning:
     The component "Fluent Assertions" is governed by the rules defined in the Xceed License Agreement and
     the Xceed Fluent Assertions Community License. You may use Fluent Assertions free of charge for
     non-commercial use only. An active subscription is required to use Fluent Assertions for commercial use.
     Please contact Xceed Sales mailto:sales@xceed.com to acquire a subscription at a very low cost.
     A paid commercial license supports the development and continued increasing support of
     Fluent Assertions users under both commercial and community licenses. Help us
     keep Fluent Assertions at the forefront of unit testing.
     For more information, visit https://xceed.com/products/unit-testing/fluent-assertions/
[xUnit.net 00:00:01.15]   Finished:    CardValidation.Tests
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="f08d61734a2b" outcome="Error" timestamp="2025-08-11T11:35:00.6415826+00:00">
        <Text>[xUnit.net 00:00:00.77]     CardValidation.Tests.Unit.CardValidationServiceTests.ValidateOwner_ShouldReturnTrueforValid_FalseforInvalidNames(name: "Leo ", expected: False) [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="f08d61734a2b" outcome="Error" timestamp="2025-08-11T11:35:00.6439498+00:00">
        <Text>[xUnit.net 00:00:00.78]     CardValidation.Tests.Unit.CardValidationServiceTests.ValidateIssueDate_ShouldReturnExpected(date: "0826", expected: False) [FAIL]</Text>
      </RunInfo>
    </RunInfos>
    <CollectorDataEntries>
      <Collector agentName="f08d61734a2b" uri="datacollector://microsoft/CoverletCodeCoverage/1.0" collectorDisplayName="XPlat code coverage">
        <UriAttachments>
          <UriAttachment>
            <A href="f08d61734a2b/coverage.cobertura.xml"></A>
          </UriAttachment>
        </UriAttachments>
      </Collector>
    </CollectorDataEntries>
  </ResultSummary>
</TestRun>